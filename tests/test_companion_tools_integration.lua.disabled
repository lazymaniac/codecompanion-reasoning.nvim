local h = require('tests.helpers')

local new_set = MiniTest.new_set

local child = MiniTest.new_child_neovim()
local T = new_set({
  hooks = {
    pre_once = function()
      h.child_start(child)
      child.lua([[
        h = require('tests.helpers')
        ReasoningAgentBase = require('codecompanion._extensions.reasoning.helpers.reasoning_agent_base').ReasoningAgentBase

        -- Mock CodeCompanion config and chat
        package.loaded['codecompanion.config'] = {
          strategies = {
            chat = {
              tools = {
                ask_user = {
                  id = 'reasoning:ask_user',
                  description = 'Ask user for input',
                  callback = { name = 'ask_user' }
                },
                tool_discovery = {
                  id = 'reasoning:tool_discovery',
                  description = 'Discover and add tools',
                  callback = { name = 'tool_discovery' }
                }
              }
            }
          }
        }

        -- Helper function to create mock agent with chat
        function create_mock_agent_with_chat()
          local added_tools = {}

          return {
            chat = {
              id = 'test_chat_123',
              tool_registry = {
                add = function(self, tool_name, tool_config)
                  table.insert(added_tools, tool_name)
                  return true
                end
              },
              add_message = function(self, message)
                -- Mock function for message adding
              end
            }
          }, added_tools
        end

        function create_mock_agent_without_registry()
          return {
            chat = {
              id = 'test_chat_456'
              -- No tool_registry
            }
          }
        end
      ]])
    end,
    post_once = child.stop,
  },
})

-- Test companion tools addition
T['add_companion_tools function executes without error'] = function()
  child.lua([[
    agent, added_tools = create_mock_agent_with_chat()

    -- Call the function - should not error
    success = pcall(function()
      ReasoningAgentBase.add_companion_tools(agent, 'Chain of Thought Agent')
    end)

    result = {
      success = success,
      added_tools_type = type(added_tools)
    }
  ]])

  local result = child.lua_get('result')

  h.eq(true, result.success)
  h.eq('table', result.added_tools_type)
end

T['add_companion_tools only adds once per agent type per chat'] = function()
  child.lua([[
    agent, added_tools = create_mock_agent_with_chat()

    -- Add tools first time
    ReasoningAgentBase.add_companion_tools(agent, 'Tree of Thought Agent')
    first_count = #added_tools

    -- Try to add again
    ReasoningAgentBase.add_companion_tools(agent, 'Tree of Thought Agent')
    second_count = #added_tools

    counts_info = {
      first_count = first_count,
      second_count = second_count,
      same_count = first_count == second_count
    }
  ]])

  local counts_info = child.lua_get('counts_info')

  -- Test that the function doesn't error and maintains state consistency
  h.eq(counts_info.first_count, counts_info.second_count) -- Should be same count both times
  h.eq(true, counts_info.same_count)
end

T['add_companion_tools handles missing tool_registry gracefully'] = function()
  child.lua([[
    agent = create_mock_agent_without_registry()

    -- This should not error
    success = pcall(function()
      ReasoningAgentBase.add_companion_tools(agent, 'Graph of Thought Agent')
    end)

    result = { success = success }
  ]])

  local result = child.lua_get('result')

  h.eq(true, result.success)
end

T['add_companion_tools only adds once per chat regardless of agent type'] = function()
  child.lua([[
    agent, added_tools = create_mock_agent_with_chat()

    -- Add tools for first agent type
    ReasoningAgentBase.add_companion_tools(agent, 'Chain of Thought Agent')
    first_count = #added_tools

    -- Try to add tools for different agent type in same chat
    ReasoningAgentBase.add_companion_tools(agent, 'Tree of Thought Agent')
    second_count = #added_tools

    different_agents_info = {
      first_count = first_count,
      second_count = second_count,
      tools_not_added_again = second_count == first_count
    }
  ]])

  local different_agents_info = child.lua_get('different_agents_info')

  -- Test that tools are not added again for different agent type in same chat
  h.eq(different_agents_info.first_count, different_agents_info.second_count)
  h.eq(true, different_agents_info.tools_not_added_again)
end

-- Test system prompt integration
T['unified prompt includes collaboration protocol section'] = function()
  child.lua([[
    UnifiedReasoningPrompt = require('codecompanion._extensions.reasoning.helpers.unified_reasoning_prompt')

    -- Test chain of thought config
    chain_config = UnifiedReasoningPrompt.chain_of_thought_config()
    chain_prompt = UnifiedReasoningPrompt.generate(chain_config)

    prompt_analysis = {
      has_collaboration_protocol = string.find(chain_prompt, 'INTERACTIVE COLLABORATION PROTOCOL') ~= nil,
      has_ask_user_guidance = string.find(chain_prompt, 'ask_user') ~= nil,
      has_required_situations = string.find(chain_prompt, 'REQUIRED SITUATIONS') ~= nil,
      has_avoid_asking = string.find(chain_prompt, 'AVOID ASKING WHEN') ~= nil,
      has_execution_pattern = string.find(chain_prompt, 'ASK_USER EXECUTION PATTERN') ~= nil
    }
  ]])

  local prompt_analysis = child.lua_get('prompt_analysis')

  h.eq(true, prompt_analysis.has_collaboration_protocol)
  h.eq(true, prompt_analysis.has_ask_user_guidance)
  h.eq(true, prompt_analysis.has_required_situations)
  h.eq(true, prompt_analysis.has_avoid_asking)
  h.eq(true, prompt_analysis.has_execution_pattern)
end

T['collaboration protocol appears in all reasoning types'] = function()
  child.lua([[
    UnifiedReasoningPrompt = require('codecompanion._extensions.reasoning.helpers.unified_reasoning_prompt')

    -- Test all three reasoning types
    chain_config = UnifiedReasoningPrompt.chain_of_thought_config()
    tree_config = UnifiedReasoningPrompt.tree_of_thoughts_config()
    graph_config = UnifiedReasoningPrompt.graph_of_thoughts_config()

    chain_prompt = UnifiedReasoningPrompt.generate(chain_config)
    tree_prompt = UnifiedReasoningPrompt.generate(tree_config)
    graph_prompt = UnifiedReasoningPrompt.generate(graph_config)

    all_types_info = {
      chain_has_collaboration = string.find(chain_prompt, 'INTERACTIVE COLLABORATION PROTOCOL') ~= nil,
      tree_has_collaboration = string.find(tree_prompt, 'INTERACTIVE COLLABORATION PROTOCOL') ~= nil,
      graph_has_collaboration = string.find(graph_prompt, 'INTERACTIVE COLLABORATION PROTOCOL') ~= nil
    }
  ]])

  local all_types_info = child.lua_get('all_types_info')

  h.eq(true, all_types_info.chain_has_collaboration)
  h.eq(true, all_types_info.tree_has_collaboration)
  h.eq(true, all_types_info.graph_has_collaboration)
end

return T

